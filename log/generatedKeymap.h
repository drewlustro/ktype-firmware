/* Copyright (C) 2014-2016 by Jacob Alexander
 *
 * This file is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file.  If not, see <http://www.gnu.org/licenses/>.
 */

// This file was generated by the kll compiler, DO NOT EDIT.
// Generation Date:    2017-10-31
// KLL Emitter:        kiibohd
// KLL Version:        BETA 0.5c.f0f1032e4690f103be99d616c17d0c22a2a7633c - 2017-10-14 15:44:22 -0700
// KLL Git Changes:    None
// Compiler arguments:
//      /srv/KiiConf/controller/kll/kll
//    --config
//      /srv/KiiConf/controller/Scan/Devices/ISSILed/capabilities.kll
//      /srv/KiiConf/controller/Scan/Devices/MatrixARM/capabilities.kll
//      /srv/KiiConf/controller/Scan/Devices/PortSwap/capabilities.kll
//      /srv/KiiConf/controller/Scan/Devices/UARTConnect/capabilities.kll
//      /srv/KiiConf/controller/Macro/PartialMap/capabilities.kll
//      /srv/KiiConf/controller/Macro/PixelMap/capabilities.kll
//      /srv/KiiConf/controller/Output/HID-IO/capabilities.kll
//      /srv/KiiConf/controller/Output/pjrcUSB/capabilities.kll
//    --base
//      /srv/KiiConf/controller/Scan/K-Type/scancode_map.kll
//    --default
//      /srv/KiiConf/controller/kll/layouts/stdFuncMap.kll
//      KType-Standard-0.kll
//    --partial
//      /srv/KiiConf/controller/kll/layouts/stdFuncMap.kll
//      KType-Standard-1.kll
//    --emitter
//      kiibohd
//    --def-template
//      /srv/KiiConf/controller/kll/templates/kiibohdDefs.h
//    --map-template
//      /srv/KiiConf/controller/kll/templates/kiibohdKeymap.h
//    --pixel-template
//      /srv/KiiConf/controller/kll/templates/kiibohdPixelmap.c
//    --def-output
//      kll_defs.h
//    --map-output
//      generatedKeymap.h
//    --pixel-output
//      generatedPixelmap.c
//    --preprocessor-tmp-path
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll
//
// - Configuration File -
//    ISSILedCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Scan_Devices_ISSILed@['capabilities']_processed.kll
//    MatrixArmCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Scan_Devices_MatrixARM@['capabilities']_processed.kll
//    PortSwapCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Scan_Devices_PortSwap@['capabilities']_processed.kll
//    UARTConnectCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Scan_Devices_UARTConnect@['capabilities']_processed.kll
//    PartialMapCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Macro_PartialMap@['capabilities']_processed.kll
//    PixelMapCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Macro_PixelMap@['capabilities']_processed.kll
//    HID-IOCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Output_HID-IO@['capabilities']_processed.kll
//    pjrcUSBCapabilities
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Output_pjrcUSB@['capabilities']_processed.kll
// - Generic Files -
// - Base Layer -
//    K-Type
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_Scan_K-Type@['scancode_map']_processed.kll
// - Default Layer -
//    stdFuncMap
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll
//    KType
//      /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/@['KType-Standard-0']_processed.kll
// - Partial Layers -
//    Layer 1
//     stdFuncMap
//       /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/_srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll
//     KType
//       /srv/KiiConf/tmp/d871eb8dd74bdfb65103da4e14c7d9a6159f7c5c4c12cb/tmp_kll/@['KType-Standard-1']_processed.kll



#pragma once

// ----- Includes -----

// KLL Include
#include <kll.h>



// ----- Capabilities -----

// Capability function declarations
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerLatch_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerLock_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerShift_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerState_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_consCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_flashMode_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_kbdProtocolBoot_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_kbdProtocolNKRO_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_noneSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_sysCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_toggleKbdProtocol_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_usbCodeSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_AnimationControl_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_AnimationIndex_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_Animation_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_Pixel_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Port_cross_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Port_uart_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Port_usb_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );



// Indexed Capabilities Table
const Capability CapabilitiesList[] = {
	/* 0 */ { LED_control_capability, 2 },
	/* 1 */ { Macro_layerLatch_capability, 2 },
	/* 2 */ { Macro_layerLock_capability, 2 },
	/* 3 */ { Macro_layerRotate_capability, 1 },
	/* 4 */ { Macro_layerShift_capability, 2 },
	/* 5 */ { Macro_layerState_capability, 3 },
	/* 6 */ { Output_consCtrlSend_capability, 2 },
	/* 7 */ { Output_flashMode_capability, 0 },
	/* 8 */ { Output_kbdProtocolBoot_capability, 0 },
	/* 9 */ { Output_kbdProtocolNKRO_capability, 0 },
	/* 10 */ { Output_noneSend_capability, 0 },
	/* 11 */ { Output_sysCtrlSend_capability, 1 },
	/* 12 */ { Output_toggleKbdProtocol_capability, 0 },
	/* 13 */ { Output_usbCodeSend_capability, 1 },
	/* 14 */ { Output_usbMouse_capability, 6 },
	/* 15 */ { Pixel_AnimationControl_capability, 1 },
	/* 16 */ { Pixel_AnimationIndex_capability, 2 },
	/* 17 */ { Pixel_Animation_capability, 7 },
	/* 18 */ { Pixel_Pixel_capability, 0 },
	/* 19 */ { Port_cross_capability, 0 },
	/* 20 */ { Port_uart_capability, 0 },
	/* 21 */ { Port_usb_capability, 0 },
};


// -- Result Macros

// Result Macro Guides
Guide_RM( 0 ) = { 1, 6, 181, 0, 0 }; // (HID(ConsCode)"CONSUMER_SCAN_NEXT_TRACK")
Guide_RM( 1 ) = { 1, 6, 182, 0, 0 }; // (HID(ConsCode)"CONSUMER_SCAN_PREVIOUS_TRACK")
Guide_RM( 2 ) = { 1, 6, 205, 0, 0 }; // (HID(ConsCode)"CONSUMER_PAUSE_PLAY")
Guide_RM( 3 ) = { 1, 6, 233, 0, 0 }; // (HID(ConsCode)"CONSUMER_VOLUME_UP")
Guide_RM( 4 ) = { 1, 6, 234, 0, 0 }; // (HID(ConsCode)"CONSUMER_VOLUME_DOWN")
Guide_RM( 5 ) = { 1, 6, 38, 2, 0 }; // (HID(ConsCode)"AC_STOP")
Guide_RM( 6 ) = { 1, 13, KEY_A, 0 }; // (HID(USBCode)"KEY_A")
Guide_RM( 7 ) = { 1, 13, KEY_B, 0 }; // (HID(USBCode)"KEY_B")
Guide_RM( 8 ) = { 1, 13, KEY_C, 0 }; // (HID(USBCode)"KEY_C")
Guide_RM( 9 ) = { 1, 13, KEY_D, 0 }; // (HID(USBCode)"KEY_D")
Guide_RM( 10 ) = { 1, 13, KEY_E, 0 }; // (HID(USBCode)"KEY_E")
Guide_RM( 11 ) = { 1, 13, KEY_F, 0 }; // (HID(USBCode)"KEY_F")
Guide_RM( 12 ) = { 1, 13, KEY_G, 0 }; // (HID(USBCode)"KEY_G")
Guide_RM( 13 ) = { 1, 13, KEY_H, 0 }; // (HID(USBCode)"KEY_H")
Guide_RM( 14 ) = { 1, 13, KEY_I, 0 }; // (HID(USBCode)"KEY_I")
Guide_RM( 15 ) = { 1, 13, KEY_J, 0 }; // (HID(USBCode)"KEY_J")
Guide_RM( 16 ) = { 1, 13, KEY_K, 0 }; // (HID(USBCode)"KEY_K")
Guide_RM( 17 ) = { 1, 13, KEY_L, 0 }; // (HID(USBCode)"KEY_L")
Guide_RM( 18 ) = { 1, 13, KEY_M, 0 }; // (HID(USBCode)"KEY_M")
Guide_RM( 19 ) = { 1, 13, KEY_N, 0 }; // (HID(USBCode)"KEY_N")
Guide_RM( 20 ) = { 1, 13, KEY_O, 0 }; // (HID(USBCode)"KEY_O")
Guide_RM( 21 ) = { 1, 13, KEY_P, 0 }; // (HID(USBCode)"KEY_P")
Guide_RM( 22 ) = { 1, 13, KEY_Q, 0 }; // (HID(USBCode)"KEY_Q")
Guide_RM( 23 ) = { 1, 13, KEY_R, 0 }; // (HID(USBCode)"KEY_R")
Guide_RM( 24 ) = { 1, 13, KEY_S, 0 }; // (HID(USBCode)"KEY_S")
Guide_RM( 25 ) = { 1, 13, KEY_T, 0 }; // (HID(USBCode)"KEY_T")
Guide_RM( 26 ) = { 1, 13, KEY_U, 0 }; // (HID(USBCode)"KEY_U")
Guide_RM( 27 ) = { 1, 13, KEY_V, 0 }; // (HID(USBCode)"KEY_V")
Guide_RM( 28 ) = { 1, 13, KEY_W, 0 }; // (HID(USBCode)"KEY_W")
Guide_RM( 29 ) = { 1, 13, KEY_X, 0 }; // (HID(USBCode)"KEY_X")
Guide_RM( 30 ) = { 1, 13, KEY_Y, 0 }; // (HID(USBCode)"KEY_Y")
Guide_RM( 31 ) = { 1, 13, KEY_Z, 0 }; // (HID(USBCode)"KEY_Z")
Guide_RM( 32 ) = { 1, 13, KEY_1, 0 }; // (HID(USBCode)"KEY_1")
Guide_RM( 33 ) = { 1, 13, KEY_2, 0 }; // (HID(USBCode)"KEY_2")
Guide_RM( 34 ) = { 1, 13, KEY_3, 0 }; // (HID(USBCode)"KEY_3")
Guide_RM( 35 ) = { 1, 13, KEY_4, 0 }; // (HID(USBCode)"KEY_4")
Guide_RM( 36 ) = { 1, 13, KEY_5, 0 }; // (HID(USBCode)"KEY_5")
Guide_RM( 37 ) = { 1, 13, KEY_6, 0 }; // (HID(USBCode)"KEY_6")
Guide_RM( 38 ) = { 1, 13, KEY_7, 0 }; // (HID(USBCode)"KEY_7")
Guide_RM( 39 ) = { 1, 13, KEY_8, 0 }; // (HID(USBCode)"KEY_8")
Guide_RM( 40 ) = { 1, 13, KEY_9, 0 }; // (HID(USBCode)"KEY_9")
Guide_RM( 41 ) = { 1, 13, KEY_0, 0 }; // (HID(USBCode)"KEY_0")
Guide_RM( 42 ) = { 1, 13, KEY_ENTER, 0 }; // (HID(USBCode)"KEY_ENTER")
Guide_RM( 43 ) = { 1, 13, KEY_ESC, 0 }; // (HID(USBCode)"KEY_ESC")
Guide_RM( 44 ) = { 1, 13, KEY_BACKSPACE, 0 }; // (HID(USBCode)"KEY_BACKSPACE")
Guide_RM( 45 ) = { 1, 13, KEY_TAB, 0 }; // (HID(USBCode)"KEY_TAB")
Guide_RM( 46 ) = { 1, 13, KEY_SPACE, 0 }; // (HID(USBCode)"KEY_SPACE")
Guide_RM( 47 ) = { 1, 13, KEY_MINUS, 0 }; // (HID(USBCode)"KEY_MINUS")
Guide_RM( 48 ) = { 1, 13, KEY_EQUAL, 0 }; // (HID(USBCode)"KEY_EQUAL")
Guide_RM( 49 ) = { 1, 13, KEY_LEFT_BRACKET, 0 }; // (HID(USBCode)"KEY_LEFT_BRACKET")
Guide_RM( 50 ) = { 1, 13, KEY_RIGHT_BRACKET, 0 }; // (HID(USBCode)"KEY_RIGHT_BRACKET")
Guide_RM( 51 ) = { 1, 13, KEY_BACKSLASH, 0 }; // (HID(USBCode)"KEY_BACKSLASH")
Guide_RM( 52 ) = { 1, 13, KEY_SEMICOLON, 0 }; // (HID(USBCode)"KEY_SEMICOLON")
Guide_RM( 53 ) = { 1, 13, KEY_QUOTE, 0 }; // (HID(USBCode)"KEY_QUOTE")
Guide_RM( 54 ) = { 1, 13, KEY_BACKTICK, 0 }; // (HID(USBCode)"KEY_BACKTICK")
Guide_RM( 55 ) = { 1, 13, KEY_COMMA, 0 }; // (HID(USBCode)"KEY_COMMA")
Guide_RM( 56 ) = { 1, 13, KEY_PERIOD, 0 }; // (HID(USBCode)"KEY_PERIOD")
Guide_RM( 57 ) = { 1, 13, KEY_SLASH, 0 }; // (HID(USBCode)"KEY_SLASH")
Guide_RM( 58 ) = { 1, 13, KEY_CAPS_LOCK, 0 }; // (HID(USBCode)"KEY_CAPS_LOCK")
Guide_RM( 59 ) = { 1, 13, KEY_F1, 0 }; // (HID(USBCode)"KEY_F1")
Guide_RM( 60 ) = { 1, 13, KEY_F2, 0 }; // (HID(USBCode)"KEY_F2")
Guide_RM( 61 ) = { 1, 13, KEY_F3, 0 }; // (HID(USBCode)"KEY_F3")
Guide_RM( 62 ) = { 1, 13, KEY_F4, 0 }; // (HID(USBCode)"KEY_F4")
Guide_RM( 63 ) = { 1, 13, KEY_F5, 0 }; // (HID(USBCode)"KEY_F5")
Guide_RM( 64 ) = { 1, 13, KEY_F6, 0 }; // (HID(USBCode)"KEY_F6")
Guide_RM( 65 ) = { 1, 13, KEY_F7, 0 }; // (HID(USBCode)"KEY_F7")
Guide_RM( 66 ) = { 1, 13, KEY_F8, 0 }; // (HID(USBCode)"KEY_F8")
Guide_RM( 67 ) = { 1, 13, KEY_F9, 0 }; // (HID(USBCode)"KEY_F9")
Guide_RM( 68 ) = { 1, 13, KEY_F10, 0 }; // (HID(USBCode)"KEY_F10")
Guide_RM( 69 ) = { 1, 13, KEY_F11, 0 }; // (HID(USBCode)"KEY_F11")
Guide_RM( 70 ) = { 1, 13, KEY_F12, 0 }; // (HID(USBCode)"KEY_F12")
Guide_RM( 71 ) = { 1, 13, KEY_PRINTSCREEN, 0 }; // (HID(USBCode)"KEY_PRINTSCREEN")
Guide_RM( 72 ) = { 1, 13, KEY_SCROLL_LOCK, 0 }; // (HID(USBCode)"KEY_SCROLL_LOCK")
Guide_RM( 73 ) = { 1, 13, KEY_PAUSE, 0 }; // (HID(USBCode)"KEY_PAUSE")
Guide_RM( 74 ) = { 1, 13, KEY_INSERT, 0 }; // (HID(USBCode)"KEY_INSERT")
Guide_RM( 75 ) = { 1, 13, KEY_HOME, 0 }; // (HID(USBCode)"KEY_HOME")
Guide_RM( 76 ) = { 1, 13, KEY_PAGE_UP, 0 }; // (HID(USBCode)"KEY_PAGE_UP")
Guide_RM( 77 ) = { 1, 13, KEY_DELETE, 0 }; // (HID(USBCode)"KEY_DELETE")
Guide_RM( 78 ) = { 1, 13, KEY_END, 0 }; // (HID(USBCode)"KEY_END")
Guide_RM( 79 ) = { 1, 13, KEY_PAGE_DOWN, 0 }; // (HID(USBCode)"KEY_PAGE_DOWN")
Guide_RM( 80 ) = { 1, 13, KEY_RIGHT, 0 }; // (HID(USBCode)"KEY_RIGHT")
Guide_RM( 81 ) = { 1, 13, KEY_LEFT, 0 }; // (HID(USBCode)"KEY_LEFT")
Guide_RM( 82 ) = { 1, 13, KEY_DOWN, 0 }; // (HID(USBCode)"KEY_DOWN")
Guide_RM( 83 ) = { 1, 13, KEY_UP, 0 }; // (HID(USBCode)"KEY_UP")
Guide_RM( 84 ) = { 1, 13, KEY_F13, 0 }; // (HID(USBCode)"KEY_F13")
Guide_RM( 85 ) = { 1, 13, KEY_F14, 0 }; // (HID(USBCode)"KEY_F14")
Guide_RM( 86 ) = { 1, 13, KEY_F15, 0 }; // (HID(USBCode)"KEY_F15")
Guide_RM( 87 ) = { 1, 13, KEY_F16, 0 }; // (HID(USBCode)"KEY_F16")
Guide_RM( 88 ) = { 1, 13, KEY_F17, 0 }; // (HID(USBCode)"KEY_F17")
Guide_RM( 89 ) = { 1, 13, KEY_F18, 0 }; // (HID(USBCode)"KEY_F18")
Guide_RM( 90 ) = { 1, 13, KEY_F19, 0 }; // (HID(USBCode)"KEY_F19")
Guide_RM( 91 ) = { 1, 13, KEY_F20, 0 }; // (HID(USBCode)"KEY_F20")
Guide_RM( 92 ) = { 1, 13, KEY_F21, 0 }; // (HID(USBCode)"KEY_F21")
Guide_RM( 93 ) = { 1, 13, KEY_F22, 0 }; // (HID(USBCode)"KEY_F22")
Guide_RM( 94 ) = { 1, 13, KEY_F23, 0 }; // (HID(USBCode)"KEY_F23")
Guide_RM( 95 ) = { 1, 13, KEY_F24, 0 }; // (HID(USBCode)"KEY_F24")
Guide_RM( 96 ) = { 1, 13, KEY_LCTRL, 0 }; // (HID(USBCode)"KEY_LCTRL")
Guide_RM( 97 ) = { 1, 13, KEY_LSHIFT, 0 }; // (HID(USBCode)"KEY_LSHIFT")
Guide_RM( 98 ) = { 1, 13, KEY_LALT, 0 }; // (HID(USBCode)"KEY_LALT")
Guide_RM( 99 ) = { 1, 13, KEY_LGUI, 0 }; // (HID(USBCode)"KEY_LGUI")
Guide_RM( 100 ) = { 1, 13, KEY_RSHIFT, 0 }; // (HID(USBCode)"KEY_RSHIFT")
Guide_RM( 101 ) = { 1, 13, KEY_RALT, 0 }; // (HID(USBCode)"KEY_RALT")
Guide_RM( 102 ) = { 1, 13, KEY_RGUI, 0 }; // (HID(USBCode)"KEY_RGUI")
Guide_RM( 103 ) = { 1, 15, 0, 0 }; // (animation_control(0))
Guide_RM( 104 ) = { 1, 15, 1, 0 }; // (animation_control(1))
Guide_RM( 105 ) = { 1, 15, 2, 0 }; // (animation_control(2))
Guide_RM( 106 ) = { 1, 15, 3, 0 }; // (animation_control(3))
Guide_RM( 107 ) = { 1, 15, 4, 0 }; // (animation_control(4))
Guide_RM( 108 ) = { 1, 15, 5, 0 }; // (animation_control(5))
Guide_RM( 109 ) = { 1, 7, 0 }; // (flashMode())
Guide_RM( 110 ) = { 1, 4, 1, 0, 0 }; // (layerShift(1))
Guide_RM( 111 ) = { 1, 4, 2, 0, 0 }; // (layerShift(2))
Guide_RM( 112 ) = { 1, 0, 0, 15, 0 }; // (ledControl(0,15))
Guide_RM( 113 ) = { 1, 0, 1, 15, 0 }; // (ledControl(1,15))
Guide_RM( 114 ) = { 1, 0, 2, 127, 0 }; // (ledControl(2,127))
Guide_RM( 115 ) = { 1, 0, 2, 190, 0 }; // (ledControl(2,190))
Guide_RM( 116 ) = { 1, 0, 2, 255, 0 }; // (ledControl(2,255))
Guide_RM( 117 ) = { 1, 0, 2, 63, 0 }; // (ledControl(2,63))
Guide_RM( 118 ) = { 1, 0, 3, 0, 0 }; // (ledControl(3,0))
Guide_RM( 119 ) = { 1, 0, 5, 255, 0 }; // (ledControl(5,255))


// -- Result Macro List

// Indexed Table of Result Macros
const ResultMacro ResultMacroList[] = {
	Define_RM( 0 ), // (HID(ConsCode)"CONSUMER_SCAN_NEXT_TRACK")
	Define_RM( 1 ), // (HID(ConsCode)"CONSUMER_SCAN_PREVIOUS_TRACK")
	Define_RM( 2 ), // (HID(ConsCode)"CONSUMER_PAUSE_PLAY")
	Define_RM( 3 ), // (HID(ConsCode)"CONSUMER_VOLUME_UP")
	Define_RM( 4 ), // (HID(ConsCode)"CONSUMER_VOLUME_DOWN")
	Define_RM( 5 ), // (HID(ConsCode)"AC_STOP")
	Define_RM( 6 ), // (HID(USBCode)"KEY_A")
	Define_RM( 7 ), // (HID(USBCode)"KEY_B")
	Define_RM( 8 ), // (HID(USBCode)"KEY_C")
	Define_RM( 9 ), // (HID(USBCode)"KEY_D")
	Define_RM( 10 ), // (HID(USBCode)"KEY_E")
	Define_RM( 11 ), // (HID(USBCode)"KEY_F")
	Define_RM( 12 ), // (HID(USBCode)"KEY_G")
	Define_RM( 13 ), // (HID(USBCode)"KEY_H")
	Define_RM( 14 ), // (HID(USBCode)"KEY_I")
	Define_RM( 15 ), // (HID(USBCode)"KEY_J")
	Define_RM( 16 ), // (HID(USBCode)"KEY_K")
	Define_RM( 17 ), // (HID(USBCode)"KEY_L")
	Define_RM( 18 ), // (HID(USBCode)"KEY_M")
	Define_RM( 19 ), // (HID(USBCode)"KEY_N")
	Define_RM( 20 ), // (HID(USBCode)"KEY_O")
	Define_RM( 21 ), // (HID(USBCode)"KEY_P")
	Define_RM( 22 ), // (HID(USBCode)"KEY_Q")
	Define_RM( 23 ), // (HID(USBCode)"KEY_R")
	Define_RM( 24 ), // (HID(USBCode)"KEY_S")
	Define_RM( 25 ), // (HID(USBCode)"KEY_T")
	Define_RM( 26 ), // (HID(USBCode)"KEY_U")
	Define_RM( 27 ), // (HID(USBCode)"KEY_V")
	Define_RM( 28 ), // (HID(USBCode)"KEY_W")
	Define_RM( 29 ), // (HID(USBCode)"KEY_X")
	Define_RM( 30 ), // (HID(USBCode)"KEY_Y")
	Define_RM( 31 ), // (HID(USBCode)"KEY_Z")
	Define_RM( 32 ), // (HID(USBCode)"KEY_1")
	Define_RM( 33 ), // (HID(USBCode)"KEY_2")
	Define_RM( 34 ), // (HID(USBCode)"KEY_3")
	Define_RM( 35 ), // (HID(USBCode)"KEY_4")
	Define_RM( 36 ), // (HID(USBCode)"KEY_5")
	Define_RM( 37 ), // (HID(USBCode)"KEY_6")
	Define_RM( 38 ), // (HID(USBCode)"KEY_7")
	Define_RM( 39 ), // (HID(USBCode)"KEY_8")
	Define_RM( 40 ), // (HID(USBCode)"KEY_9")
	Define_RM( 41 ), // (HID(USBCode)"KEY_0")
	Define_RM( 42 ), // (HID(USBCode)"KEY_ENTER")
	Define_RM( 43 ), // (HID(USBCode)"KEY_ESC")
	Define_RM( 44 ), // (HID(USBCode)"KEY_BACKSPACE")
	Define_RM( 45 ), // (HID(USBCode)"KEY_TAB")
	Define_RM( 46 ), // (HID(USBCode)"KEY_SPACE")
	Define_RM( 47 ), // (HID(USBCode)"KEY_MINUS")
	Define_RM( 48 ), // (HID(USBCode)"KEY_EQUAL")
	Define_RM( 49 ), // (HID(USBCode)"KEY_LEFT_BRACKET")
	Define_RM( 50 ), // (HID(USBCode)"KEY_RIGHT_BRACKET")
	Define_RM( 51 ), // (HID(USBCode)"KEY_BACKSLASH")
	Define_RM( 52 ), // (HID(USBCode)"KEY_SEMICOLON")
	Define_RM( 53 ), // (HID(USBCode)"KEY_QUOTE")
	Define_RM( 54 ), // (HID(USBCode)"KEY_BACKTICK")
	Define_RM( 55 ), // (HID(USBCode)"KEY_COMMA")
	Define_RM( 56 ), // (HID(USBCode)"KEY_PERIOD")
	Define_RM( 57 ), // (HID(USBCode)"KEY_SLASH")
	Define_RM( 58 ), // (HID(USBCode)"KEY_CAPS_LOCK")
	Define_RM( 59 ), // (HID(USBCode)"KEY_F1")
	Define_RM( 60 ), // (HID(USBCode)"KEY_F2")
	Define_RM( 61 ), // (HID(USBCode)"KEY_F3")
	Define_RM( 62 ), // (HID(USBCode)"KEY_F4")
	Define_RM( 63 ), // (HID(USBCode)"KEY_F5")
	Define_RM( 64 ), // (HID(USBCode)"KEY_F6")
	Define_RM( 65 ), // (HID(USBCode)"KEY_F7")
	Define_RM( 66 ), // (HID(USBCode)"KEY_F8")
	Define_RM( 67 ), // (HID(USBCode)"KEY_F9")
	Define_RM( 68 ), // (HID(USBCode)"KEY_F10")
	Define_RM( 69 ), // (HID(USBCode)"KEY_F11")
	Define_RM( 70 ), // (HID(USBCode)"KEY_F12")
	Define_RM( 71 ), // (HID(USBCode)"KEY_PRINTSCREEN")
	Define_RM( 72 ), // (HID(USBCode)"KEY_SCROLL_LOCK")
	Define_RM( 73 ), // (HID(USBCode)"KEY_PAUSE")
	Define_RM( 74 ), // (HID(USBCode)"KEY_INSERT")
	Define_RM( 75 ), // (HID(USBCode)"KEY_HOME")
	Define_RM( 76 ), // (HID(USBCode)"KEY_PAGE_UP")
	Define_RM( 77 ), // (HID(USBCode)"KEY_DELETE")
	Define_RM( 78 ), // (HID(USBCode)"KEY_END")
	Define_RM( 79 ), // (HID(USBCode)"KEY_PAGE_DOWN")
	Define_RM( 80 ), // (HID(USBCode)"KEY_RIGHT")
	Define_RM( 81 ), // (HID(USBCode)"KEY_LEFT")
	Define_RM( 82 ), // (HID(USBCode)"KEY_DOWN")
	Define_RM( 83 ), // (HID(USBCode)"KEY_UP")
	Define_RM( 84 ), // (HID(USBCode)"KEY_F13")
	Define_RM( 85 ), // (HID(USBCode)"KEY_F14")
	Define_RM( 86 ), // (HID(USBCode)"KEY_F15")
	Define_RM( 87 ), // (HID(USBCode)"KEY_F16")
	Define_RM( 88 ), // (HID(USBCode)"KEY_F17")
	Define_RM( 89 ), // (HID(USBCode)"KEY_F18")
	Define_RM( 90 ), // (HID(USBCode)"KEY_F19")
	Define_RM( 91 ), // (HID(USBCode)"KEY_F20")
	Define_RM( 92 ), // (HID(USBCode)"KEY_F21")
	Define_RM( 93 ), // (HID(USBCode)"KEY_F22")
	Define_RM( 94 ), // (HID(USBCode)"KEY_F23")
	Define_RM( 95 ), // (HID(USBCode)"KEY_F24")
	Define_RM( 96 ), // (HID(USBCode)"KEY_LCTRL")
	Define_RM( 97 ), // (HID(USBCode)"KEY_LSHIFT")
	Define_RM( 98 ), // (HID(USBCode)"KEY_LALT")
	Define_RM( 99 ), // (HID(USBCode)"KEY_LGUI")
	Define_RM( 100 ), // (HID(USBCode)"KEY_RSHIFT")
	Define_RM( 101 ), // (HID(USBCode)"KEY_RALT")
	Define_RM( 102 ), // (HID(USBCode)"KEY_RGUI")
	Define_RM( 103 ), // (animation_control(0))
	Define_RM( 104 ), // (animation_control(1))
	Define_RM( 105 ), // (animation_control(2))
	Define_RM( 106 ), // (animation_control(3))
	Define_RM( 107 ), // (animation_control(4))
	Define_RM( 108 ), // (animation_control(5))
	Define_RM( 109 ), // (flashMode())
	Define_RM( 110 ), // (layerShift(1))
	Define_RM( 111 ), // (layerShift(2))
	Define_RM( 112 ), // (ledControl(0,15))
	Define_RM( 113 ), // (ledControl(1,15))
	Define_RM( 114 ), // (ledControl(2,127))
	Define_RM( 115 ), // (ledControl(2,190))
	Define_RM( 116 ), // (ledControl(2,255))
	Define_RM( 117 ), // (ledControl(2,63))
	Define_RM( 118 ), // (ledControl(3,0))
	Define_RM( 119 ), // (ledControl(5,255))
};


// -- Trigger Macro Record

// Keeps a record/state of each result macro
ResultMacroRecord ResultMacroRecordList[ ResultMacroNum ];


// -- Trigger Macros

// Trigger Macro Guides
Guide_TM( 0 ) = { 1, 0x00, 0x01, 0x01, 0 }; // (S001)
Guide_TM( 1 ) = { 1, 0x00, 0x01, 0x02, 0 }; // (S002)
Guide_TM( 2 ) = { 1, 0x00, 0x01, 0x03, 0 }; // (S003)
Guide_TM( 3 ) = { 1, 0x00, 0x01, 0x04, 0 }; // (S004)
Guide_TM( 4 ) = { 1, 0x00, 0x01, 0x05, 0 }; // (S005)
Guide_TM( 5 ) = { 1, 0x00, 0x01, 0x06, 0 }; // (S006)
Guide_TM( 6 ) = { 1, 0x00, 0x01, 0x07, 0 }; // (S007)
Guide_TM( 7 ) = { 1, 0x00, 0x01, 0x08, 0 }; // (S008)
Guide_TM( 8 ) = { 1, 0x00, 0x01, 0x09, 0 }; // (S009)
Guide_TM( 9 ) = { 1, 0x00, 0x01, 0x0A, 0 }; // (S010)
Guide_TM( 10 ) = { 1, 0x00, 0x01, 0x0B, 0 }; // (S011)
Guide_TM( 11 ) = { 1, 0x00, 0x01, 0x0C, 0 }; // (S012)
Guide_TM( 12 ) = { 1, 0x00, 0x01, 0x0D, 0 }; // (S013)
Guide_TM( 13 ) = { 1, 0x00, 0x01, 0x0E, 0 }; // (S014)
Guide_TM( 14 ) = { 1, 0x00, 0x01, 0x0F, 0 }; // (S015)
Guide_TM( 15 ) = { 1, 0x00, 0x01, 0x10, 0 }; // (S016)
Guide_TM( 16 ) = { 1, 0x00, 0x01, 0x11, 0 }; // (S017)
Guide_TM( 17 ) = { 1, 0x00, 0x01, 0x12, 0 }; // (S018)
Guide_TM( 18 ) = { 1, 0x00, 0x01, 0x13, 0 }; // (S019)
Guide_TM( 19 ) = { 1, 0x00, 0x01, 0x14, 0 }; // (S020)
Guide_TM( 20 ) = { 1, 0x00, 0x01, 0x15, 0 }; // (S021)
Guide_TM( 21 ) = { 1, 0x00, 0x01, 0x16, 0 }; // (S022)
Guide_TM( 22 ) = { 1, 0x00, 0x01, 0x17, 0 }; // (S023)
Guide_TM( 23 ) = { 1, 0x00, 0x01, 0x18, 0 }; // (S024)
Guide_TM( 24 ) = { 1, 0x00, 0x01, 0x19, 0 }; // (S025)
Guide_TM( 25 ) = { 1, 0x00, 0x01, 0x1A, 0 }; // (S026)
Guide_TM( 26 ) = { 1, 0x00, 0x01, 0x1B, 0 }; // (S027)
Guide_TM( 27 ) = { 1, 0x00, 0x01, 0x1C, 0 }; // (S028)
Guide_TM( 28 ) = { 1, 0x00, 0x01, 0x1D, 0 }; // (S029)
Guide_TM( 29 ) = { 1, 0x00, 0x01, 0x1F, 0 }; // (S031)
Guide_TM( 30 ) = { 1, 0x00, 0x01, 0x21, 0 }; // (S033)
Guide_TM( 31 ) = { 1, 0x00, 0x01, 0x22, 0 }; // (S034)
Guide_TM( 32 ) = { 1, 0x00, 0x01, 0x23, 0 }; // (S035)
Guide_TM( 33 ) = { 1, 0x00, 0x01, 0x24, 0 }; // (S036)
Guide_TM( 34 ) = { 1, 0x00, 0x01, 0x25, 0 }; // (S037)
Guide_TM( 35 ) = { 1, 0x00, 0x01, 0x26, 0 }; // (S038)
Guide_TM( 36 ) = { 1, 0x00, 0x01, 0x27, 0 }; // (S039)
Guide_TM( 37 ) = { 1, 0x00, 0x01, 0x28, 0 }; // (S040)
Guide_TM( 38 ) = { 1, 0x00, 0x01, 0x29, 0 }; // (S041)
Guide_TM( 39 ) = { 1, 0x00, 0x01, 0x2A, 0 }; // (S042)
Guide_TM( 40 ) = { 1, 0x00, 0x01, 0x2B, 0 }; // (S043)
Guide_TM( 41 ) = { 1, 0x00, 0x01, 0x2C, 0 }; // (S044)
Guide_TM( 42 ) = { 1, 0x00, 0x01, 0x2D, 0 }; // (S045)
Guide_TM( 43 ) = { 1, 0x00, 0x01, 0x2E, 0 }; // (S046)
Guide_TM( 44 ) = { 1, 0x00, 0x01, 0x2F, 0 }; // (S047)
Guide_TM( 45 ) = { 1, 0x00, 0x01, 0x30, 0 }; // (S048)
Guide_TM( 46 ) = { 1, 0x00, 0x01, 0x31, 0 }; // (S049)
Guide_TM( 47 ) = { 1, 0x00, 0x01, 0x33, 0 }; // (S051)
Guide_TM( 48 ) = { 1, 0x00, 0x01, 0x34, 0 }; // (S052)
Guide_TM( 49 ) = { 1, 0x00, 0x01, 0x35, 0 }; // (S053)
Guide_TM( 50 ) = { 1, 0x00, 0x01, 0x36, 0 }; // (S054)
Guide_TM( 51 ) = { 1, 0x00, 0x01, 0x37, 0 }; // (S055)
Guide_TM( 52 ) = { 1, 0x00, 0x01, 0x38, 0 }; // (S056)
Guide_TM( 53 ) = { 1, 0x00, 0x01, 0x39, 0 }; // (S057)
Guide_TM( 54 ) = { 1, 0x00, 0x01, 0x3A, 0 }; // (S058)
Guide_TM( 55 ) = { 1, 0x00, 0x01, 0x3B, 0 }; // (S059)
Guide_TM( 56 ) = { 1, 0x00, 0x01, 0x3C, 0 }; // (S060)
Guide_TM( 57 ) = { 1, 0x00, 0x01, 0x3D, 0 }; // (S061)
Guide_TM( 58 ) = { 1, 0x00, 0x01, 0x3E, 0 }; // (S062)
Guide_TM( 59 ) = { 1, 0x00, 0x01, 0x3F, 0 }; // (S063)
Guide_TM( 60 ) = { 1, 0x00, 0x01, 0x40, 0 }; // (S064)
Guide_TM( 61 ) = { 1, 0x00, 0x01, 0x41, 0 }; // (S065)
Guide_TM( 62 ) = { 1, 0x00, 0x01, 0x43, 0 }; // (S067)
Guide_TM( 63 ) = { 1, 0x00, 0x01, 0x45, 0 }; // (S069)
Guide_TM( 64 ) = { 1, 0x00, 0x01, 0x47, 0 }; // (S071)
Guide_TM( 65 ) = { 1, 0x00, 0x01, 0x48, 0 }; // (S072)
Guide_TM( 66 ) = { 1, 0x00, 0x01, 0x49, 0 }; // (S073)
Guide_TM( 67 ) = { 1, 0x00, 0x01, 0x4A, 0 }; // (S074)
Guide_TM( 68 ) = { 1, 0x00, 0x01, 0x4B, 0 }; // (S075)
Guide_TM( 69 ) = { 1, 0x00, 0x01, 0x4C, 0 }; // (S076)
Guide_TM( 70 ) = { 1, 0x00, 0x01, 0x4D, 0 }; // (S077)
Guide_TM( 71 ) = { 1, 0x00, 0x01, 0x4E, 0 }; // (S078)
Guide_TM( 72 ) = { 1, 0x00, 0x01, 0x4F, 0 }; // (S079)
Guide_TM( 73 ) = { 1, 0x00, 0x01, 0x50, 0 }; // (S080)
Guide_TM( 74 ) = { 1, 0x00, 0x01, 0x52, 0 }; // (S082)
Guide_TM( 75 ) = { 1, 0x00, 0x01, 0x54, 0 }; // (S084)
Guide_TM( 76 ) = { 1, 0x00, 0x01, 0x55, 0 }; // (S085)
Guide_TM( 77 ) = { 1, 0x00, 0x01, 0x56, 0 }; // (S086)
Guide_TM( 78 ) = { 1, 0x00, 0x01, 0x57, 0 }; // (S087)
Guide_TM( 79 ) = { 1, 0x00, 0x01, 0x58, 0 }; // (S088)
Guide_TM( 80 ) = { 1, 0x00, 0x01, 0x59, 0 }; // (S089)
Guide_TM( 81 ) = { 1, 0x00, 0x01, 0x5A, 0 }; // (S090)
Guide_TM( 82 ) = { 1, 0x00, 0x01, 0x5B, 0 }; // (S091)
Guide_TM( 83 ) = { 1, 0x00, 0x01, 0x5C, 0 }; // (S092)
Guide_TM( 84 ) = { 1, 0x00, 0x01, 0x5D, 0 }; // (S093)
Guide_TM( 85 ) = { 1, 0x00, 0x01, 0x5E, 0 }; // (S094)
Guide_TM( 86 ) = { 1, 0x00, 0x01, 0x5F, 0 }; // (S095)


// -- Trigger Macro List

// Indexed Table of Trigger Macros
const TriggerMacro TriggerMacroList[] = {
	/* 0 */ Define_TM( 0, 43 ), // (S001) : (HID(USBCode)"KEY_ESC");
	/* 1 */ Define_TM( 0, 109 ), // (S001) : (flashMode());
	/* 2 */ Define_TM( 1, 59 ), // (S002) : (HID(USBCode)"KEY_F1");
	/* 3 */ Define_TM( 1, 84 ), // (S002) : (HID(USBCode)"KEY_F13");
	/* 4 */ Define_TM( 2, 60 ), // (S003) : (HID(USBCode)"KEY_F2");
	/* 5 */ Define_TM( 2, 85 ), // (S003) : (HID(USBCode)"KEY_F14");
	/* 6 */ Define_TM( 3, 86 ), // (S004) : (HID(USBCode)"KEY_F15");
	/* 7 */ Define_TM( 3, 61 ), // (S004) : (HID(USBCode)"KEY_F3");
	/* 8 */ Define_TM( 4, 62 ), // (S005) : (HID(USBCode)"KEY_F4");
	/* 9 */ Define_TM( 4, 87 ), // (S005) : (HID(USBCode)"KEY_F16");
	/* 10 */ Define_TM( 5, 88 ), // (S006) : (HID(USBCode)"KEY_F17");
	/* 11 */ Define_TM( 5, 63 ), // (S006) : (HID(USBCode)"KEY_F5");
	/* 12 */ Define_TM( 6, 64 ), // (S007) : (HID(USBCode)"KEY_F6");
	/* 13 */ Define_TM( 6, 89 ), // (S007) : (HID(USBCode)"KEY_F18");
	/* 14 */ Define_TM( 7, 65 ), // (S008) : (HID(USBCode)"KEY_F7");
	/* 15 */ Define_TM( 7, 90 ), // (S008) : (HID(USBCode)"KEY_F19");
	/* 16 */ Define_TM( 8, 66 ), // (S009) : (HID(USBCode)"KEY_F8");
	/* 17 */ Define_TM( 8, 91 ), // (S009) : (HID(USBCode)"KEY_F20");
	/* 18 */ Define_TM( 9, 92 ), // (S010) : (HID(USBCode)"KEY_F21");
	/* 19 */ Define_TM( 9, 67 ), // (S010) : (HID(USBCode)"KEY_F9");
	/* 20 */ Define_TM( 10, 68 ), // (S011) : (HID(USBCode)"KEY_F10");
	/* 21 */ Define_TM( 10, 93 ), // (S011) : (HID(USBCode)"KEY_F22");
	/* 22 */ Define_TM( 11, 94 ), // (S012) : (HID(USBCode)"KEY_F23");
	/* 23 */ Define_TM( 11, 69 ), // (S012) : (HID(USBCode)"KEY_F11");
	/* 24 */ Define_TM( 12, 70 ), // (S013) : (HID(USBCode)"KEY_F12");
	/* 25 */ Define_TM( 12, 95 ), // (S013) : (HID(USBCode)"KEY_F24");
	/* 26 */ Define_TM( 13, 71 ), // (S014) : (HID(USBCode)"KEY_PRINTSCREEN");
	/* 27 */ Define_TM( 14, 72 ), // (S015) : (HID(USBCode)"KEY_SCROLL_LOCK");
	/* 28 */ Define_TM( 15, 103 ), // (S016) : (animation_control(0));
	/* 29 */ Define_TM( 15, 73 ), // (S016) : (HID(USBCode)"KEY_PAUSE");
	/* 30 */ Define_TM( 16, 54 ), // (S017) : (HID(USBCode)"KEY_BACKTICK");
	/* 31 */ Define_TM( 17, 32 ), // (S018) : (HID(USBCode)"KEY_1");
	/* 32 */ Define_TM( 17, 117 ), // (S018) : (ledControl(2,63));
	/* 33 */ Define_TM( 18, 114 ), // (S019) : (ledControl(2,127));
	/* 34 */ Define_TM( 18, 33 ), // (S019) : (HID(USBCode)"KEY_2");
	/* 35 */ Define_TM( 19, 34 ), // (S020) : (HID(USBCode)"KEY_3");
	/* 36 */ Define_TM( 19, 115 ), // (S020) : (ledControl(2,190));
	/* 37 */ Define_TM( 20, 35 ), // (S021) : (HID(USBCode)"KEY_4");
	/* 38 */ Define_TM( 20, 116 ), // (S021) : (ledControl(2,255));
	/* 39 */ Define_TM( 21, 104 ), // (S022) : (animation_control(1));
	/* 40 */ Define_TM( 21, 36 ), // (S022) : (HID(USBCode)"KEY_5");
	/* 41 */ Define_TM( 22, 105 ), // (S023) : (animation_control(2));
	/* 42 */ Define_TM( 22, 37 ), // (S023) : (HID(USBCode)"KEY_6");
	/* 43 */ Define_TM( 23, 38 ), // (S024) : (HID(USBCode)"KEY_7");
	/* 44 */ Define_TM( 23, 106 ), // (S024) : (animation_control(3));
	/* 45 */ Define_TM( 24, 39 ), // (S025) : (HID(USBCode)"KEY_8");
	/* 46 */ Define_TM( 25, 40 ), // (S026) : (HID(USBCode)"KEY_9");
	/* 47 */ Define_TM( 26, 107 ), // (S027) : (animation_control(4));
	/* 48 */ Define_TM( 26, 41 ), // (S027) : (HID(USBCode)"KEY_0");
	/* 49 */ Define_TM( 27, 108 ), // (S028) : (animation_control(5));
	/* 50 */ Define_TM( 27, 47 ), // (S028) : (HID(USBCode)"KEY_MINUS");
	/* 51 */ Define_TM( 28, 48 ), // (S029) : (HID(USBCode)"KEY_EQUAL");
	/* 52 */ Define_TM( 28, 103 ), // (S029) : (animation_control(0));
	/* 53 */ Define_TM( 29, 44 ), // (S031) : (HID(USBCode)"KEY_BACKSPACE");
	/* 54 */ Define_TM( 30, 74 ), // (S033) : (HID(USBCode)"KEY_INSERT");
	/* 55 */ Define_TM( 30, 2 ), // (S033) : (HID(ConsCode)"CONSUMER_PAUSE_PLAY");
	/* 56 */ Define_TM( 31, 5 ), // (S034) : (HID(ConsCode)"AC_STOP");
	/* 57 */ Define_TM( 31, 75 ), // (S034) : (HID(USBCode)"KEY_HOME");
	/* 58 */ Define_TM( 32, 3 ), // (S035) : (HID(ConsCode)"CONSUMER_VOLUME_UP");
	/* 59 */ Define_TM( 32, 76 ), // (S035) : (HID(USBCode)"KEY_PAGE_UP");
	/* 60 */ Define_TM( 33, 45 ), // (S036) : (HID(USBCode)"KEY_TAB");
	/* 61 */ Define_TM( 34, 22 ), // (S037) : (HID(USBCode)"KEY_Q");
	/* 62 */ Define_TM( 35, 28 ), // (S038) : (HID(USBCode)"KEY_W");
	/* 63 */ Define_TM( 36, 10 ), // (S039) : (HID(USBCode)"KEY_E");
	/* 64 */ Define_TM( 37, 23 ), // (S040) : (HID(USBCode)"KEY_R");
	/* 65 */ Define_TM( 38, 25 ), // (S041) : (HID(USBCode)"KEY_T");
	/* 66 */ Define_TM( 39, 30 ), // (S042) : (HID(USBCode)"KEY_Y");
	/* 67 */ Define_TM( 40, 26 ), // (S043) : (HID(USBCode)"KEY_U");
	/* 68 */ Define_TM( 41, 14 ), // (S044) : (HID(USBCode)"KEY_I");
	/* 69 */ Define_TM( 42, 20 ), // (S045) : (HID(USBCode)"KEY_O");
	/* 70 */ Define_TM( 43, 21 ), // (S046) : (HID(USBCode)"KEY_P");
	/* 71 */ Define_TM( 44, 49 ), // (S047) : (HID(USBCode)"KEY_LEFT_BRACKET");
	/* 72 */ Define_TM( 45, 50 ), // (S048) : (HID(USBCode)"KEY_RIGHT_BRACKET");
	/* 73 */ Define_TM( 46, 51 ), // (S049) : (HID(USBCode)"KEY_BACKSLASH");
	/* 74 */ Define_TM( 47, 1 ), // (S051) : (HID(ConsCode)"CONSUMER_SCAN_PREVIOUS_TRACK");
	/* 75 */ Define_TM( 47, 77 ), // (S051) : (HID(USBCode)"KEY_DELETE");
	/* 76 */ Define_TM( 48, 0 ), // (S052) : (HID(ConsCode)"CONSUMER_SCAN_NEXT_TRACK");
	/* 77 */ Define_TM( 48, 78 ), // (S052) : (HID(USBCode)"KEY_END");
	/* 78 */ Define_TM( 49, 4 ), // (S053) : (HID(ConsCode)"CONSUMER_VOLUME_DOWN");
	/* 79 */ Define_TM( 49, 79 ), // (S053) : (HID(USBCode)"KEY_PAGE_DOWN");
	/* 80 */ Define_TM( 50, 58 ), // (S054) : (HID(USBCode)"KEY_CAPS_LOCK");
	/* 81 */ Define_TM( 51, 6 ), // (S055) : (HID(USBCode)"KEY_A");
	/* 82 */ Define_TM( 52, 24 ), // (S056) : (HID(USBCode)"KEY_S");
	/* 83 */ Define_TM( 53, 9 ), // (S057) : (HID(USBCode)"KEY_D");
	/* 84 */ Define_TM( 54, 11 ), // (S058) : (HID(USBCode)"KEY_F");
	/* 85 */ Define_TM( 55, 12 ), // (S059) : (HID(USBCode)"KEY_G");
	/* 86 */ Define_TM( 56, 13 ), // (S060) : (HID(USBCode)"KEY_H");
	/* 87 */ Define_TM( 57, 15 ), // (S061) : (HID(USBCode)"KEY_J");
	/* 88 */ Define_TM( 58, 16 ), // (S062) : (HID(USBCode)"KEY_K");
	/* 89 */ Define_TM( 59, 17 ), // (S063) : (HID(USBCode)"KEY_L");
	/* 90 */ Define_TM( 60, 52 ), // (S064) : (HID(USBCode)"KEY_SEMICOLON");
	/* 91 */ Define_TM( 61, 53 ), // (S065) : (HID(USBCode)"KEY_QUOTE");
	/* 92 */ Define_TM( 62, 42 ), // (S067) : (HID(USBCode)"KEY_ENTER");
	/* 93 */ Define_TM( 63, 97 ), // (S069) : (HID(USBCode)"KEY_LSHIFT");
	/* 94 */ Define_TM( 64, 31 ), // (S071) : (HID(USBCode)"KEY_Z");
	/* 95 */ Define_TM( 65, 29 ), // (S072) : (HID(USBCode)"KEY_X");
	/* 96 */ Define_TM( 66, 8 ), // (S073) : (HID(USBCode)"KEY_C");
	/* 97 */ Define_TM( 67, 27 ), // (S074) : (HID(USBCode)"KEY_V");
	/* 98 */ Define_TM( 68, 7 ), // (S075) : (HID(USBCode)"KEY_B");
	/* 99 */ Define_TM( 69, 19 ), // (S076) : (HID(USBCode)"KEY_N");
	/* 100 */ Define_TM( 70, 18 ), // (S077) : (HID(USBCode)"KEY_M");
	/* 101 */ Define_TM( 71, 55 ), // (S078) : (HID(USBCode)"KEY_COMMA");
	/* 102 */ Define_TM( 72, 56 ), // (S079) : (HID(USBCode)"KEY_PERIOD");
	/* 103 */ Define_TM( 73, 57 ), // (S080) : (HID(USBCode)"KEY_SLASH");
	/* 104 */ Define_TM( 74, 100 ), // (S082) : (HID(USBCode)"KEY_RSHIFT");
	/* 105 */ Define_TM( 75, 113 ), // (S084) : (ledControl(1,15));
	/* 106 */ Define_TM( 75, 83 ), // (S084) : (HID(USBCode)"KEY_UP");
	/* 107 */ Define_TM( 76, 96 ), // (S085) : (HID(USBCode)"KEY_LCTRL");
	/* 108 */ Define_TM( 77, 99 ), // (S086) : (HID(USBCode)"KEY_LGUI");
	/* 109 */ Define_TM( 78, 98 ), // (S087) : (HID(USBCode)"KEY_LALT");
	/* 110 */ Define_TM( 79, 46 ), // (S088) : (HID(USBCode)"KEY_SPACE");
	/* 111 */ Define_TM( 80, 101 ), // (S089) : (HID(USBCode)"KEY_RALT");
	/* 112 */ Define_TM( 81, 102 ), // (S090) : (HID(USBCode)"KEY_RGUI");
	/* 113 */ Define_TM( 82, 111 ), // (S091) : (layerShift(2));
	/* 114 */ Define_TM( 83, 110 ), // (S092) : (layerShift(1));
	/* 115 */ Define_TM( 84, 81 ), // (S093) : (HID(USBCode)"KEY_LEFT");
	/* 116 */ Define_TM( 84, 118 ), // (S093) : (ledControl(3,0));
	/* 117 */ Define_TM( 85, 82 ), // (S094) : (HID(USBCode)"KEY_DOWN");
	/* 118 */ Define_TM( 85, 112 ), // (S094) : (ledControl(0,15));
	/* 119 */ Define_TM( 86, 119 ), // (S095) : (ledControl(5,255));
	/* 120 */ Define_TM( 86, 80 ), // (S095) : (HID(USBCode)"KEY_RIGHT");
};


// -- Trigger Macro Record List

// Keeps a record/state of each trigger macro
TriggerMacroRecord TriggerMacroRecordList[ TriggerMacroNum ];



// ----- Trigger Maps -----

// MaxScanCode
// - This is retrieved from the KLL configuration
// - Should be corollated with the max scan code in the scan module
// - Maximum value is 0x100 (0x0 to 0xFF)
// - Increasing it beyond the keyboard's capabilities is just a waste of ram...
#define MaxScanCode 0x5F

// -- Trigger Lists
//
// Index 0: # of triggers in list
// Index n: pointer to trigger macro - use tm() macro

// - Default Layer -
Define_TL( default, 0x00 ) = { 0 };
Define_TL( default, 0x01 ) = { 1, 0 };
Define_TL( default, 0x02 ) = { 1, 2 };
Define_TL( default, 0x03 ) = { 1, 4 };
Define_TL( default, 0x04 ) = { 1, 7 };
Define_TL( default, 0x05 ) = { 1, 8 };
Define_TL( default, 0x06 ) = { 1, 11 };
Define_TL( default, 0x07 ) = { 1, 12 };
Define_TL( default, 0x08 ) = { 1, 14 };
Define_TL( default, 0x09 ) = { 1, 16 };
Define_TL( default, 0x0A ) = { 1, 19 };
Define_TL( default, 0x0B ) = { 1, 20 };
Define_TL( default, 0x0C ) = { 1, 23 };
Define_TL( default, 0x0D ) = { 1, 24 };
Define_TL( default, 0x0E ) = { 1, 26 };
Define_TL( default, 0x0F ) = { 1, 27 };
Define_TL( default, 0x10 ) = { 1, 29 };
Define_TL( default, 0x11 ) = { 1, 30 };
Define_TL( default, 0x12 ) = { 1, 31 };
Define_TL( default, 0x13 ) = { 1, 34 };
Define_TL( default, 0x14 ) = { 1, 35 };
Define_TL( default, 0x15 ) = { 1, 37 };
Define_TL( default, 0x16 ) = { 1, 40 };
Define_TL( default, 0x17 ) = { 1, 42 };
Define_TL( default, 0x18 ) = { 1, 43 };
Define_TL( default, 0x19 ) = { 1, 45 };
Define_TL( default, 0x1A ) = { 1, 46 };
Define_TL( default, 0x1B ) = { 1, 48 };
Define_TL( default, 0x1C ) = { 1, 50 };
Define_TL( default, 0x1D ) = { 1, 51 };
Define_TL( default, 0x1E ) = { 0 };
Define_TL( default, 0x1F ) = { 1, 53 };
Define_TL( default, 0x20 ) = { 0 };
Define_TL( default, 0x21 ) = { 1, 54 };
Define_TL( default, 0x22 ) = { 1, 57 };
Define_TL( default, 0x23 ) = { 1, 59 };
Define_TL( default, 0x24 ) = { 1, 60 };
Define_TL( default, 0x25 ) = { 1, 61 };
Define_TL( default, 0x26 ) = { 1, 62 };
Define_TL( default, 0x27 ) = { 1, 63 };
Define_TL( default, 0x28 ) = { 1, 64 };
Define_TL( default, 0x29 ) = { 1, 65 };
Define_TL( default, 0x2A ) = { 1, 66 };
Define_TL( default, 0x2B ) = { 1, 67 };
Define_TL( default, 0x2C ) = { 1, 68 };
Define_TL( default, 0x2D ) = { 1, 69 };
Define_TL( default, 0x2E ) = { 1, 70 };
Define_TL( default, 0x2F ) = { 1, 71 };
Define_TL( default, 0x30 ) = { 1, 72 };
Define_TL( default, 0x31 ) = { 1, 73 };
Define_TL( default, 0x32 ) = { 0 };
Define_TL( default, 0x33 ) = { 1, 75 };
Define_TL( default, 0x34 ) = { 1, 77 };
Define_TL( default, 0x35 ) = { 1, 79 };
Define_TL( default, 0x36 ) = { 1, 80 };
Define_TL( default, 0x37 ) = { 1, 81 };
Define_TL( default, 0x38 ) = { 1, 82 };
Define_TL( default, 0x39 ) = { 1, 83 };
Define_TL( default, 0x3A ) = { 1, 84 };
Define_TL( default, 0x3B ) = { 1, 85 };
Define_TL( default, 0x3C ) = { 1, 86 };
Define_TL( default, 0x3D ) = { 1, 87 };
Define_TL( default, 0x3E ) = { 1, 88 };
Define_TL( default, 0x3F ) = { 1, 89 };
Define_TL( default, 0x40 ) = { 1, 90 };
Define_TL( default, 0x41 ) = { 1, 91 };
Define_TL( default, 0x42 ) = { 0 };
Define_TL( default, 0x43 ) = { 1, 92 };
Define_TL( default, 0x44 ) = { 0 };
Define_TL( default, 0x45 ) = { 1, 93 };
Define_TL( default, 0x46 ) = { 0 };
Define_TL( default, 0x47 ) = { 1, 94 };
Define_TL( default, 0x48 ) = { 1, 95 };
Define_TL( default, 0x49 ) = { 1, 96 };
Define_TL( default, 0x4A ) = { 1, 97 };
Define_TL( default, 0x4B ) = { 1, 98 };
Define_TL( default, 0x4C ) = { 1, 99 };
Define_TL( default, 0x4D ) = { 1, 100 };
Define_TL( default, 0x4E ) = { 1, 101 };
Define_TL( default, 0x4F ) = { 1, 102 };
Define_TL( default, 0x50 ) = { 1, 103 };
Define_TL( default, 0x51 ) = { 0 };
Define_TL( default, 0x52 ) = { 1, 104 };
Define_TL( default, 0x53 ) = { 0 };
Define_TL( default, 0x54 ) = { 1, 106 };
Define_TL( default, 0x55 ) = { 1, 107 };
Define_TL( default, 0x56 ) = { 1, 108 };
Define_TL( default, 0x57 ) = { 1, 109 };
Define_TL( default, 0x58 ) = { 1, 110 };
Define_TL( default, 0x59 ) = { 1, 111 };
Define_TL( default, 0x5A ) = { 1, 112 };
Define_TL( default, 0x5B ) = { 1, 113 };
Define_TL( default, 0x5C ) = { 1, 114 };
Define_TL( default, 0x5D ) = { 1, 115 };
Define_TL( default, 0x5E ) = { 1, 117 };
Define_TL( default, 0x5F ) = { 1, 120 };


// - Partial Layers -
// Partial Layer 1
Define_TL( layer1, 0x00 ) = { 1, 1 };
Define_TL( layer1, 0x01 ) = { 1, 3 };
Define_TL( layer1, 0x02 ) = { 1, 5 };
Define_TL( layer1, 0x03 ) = { 1, 6 };
Define_TL( layer1, 0x04 ) = { 1, 9 };
Define_TL( layer1, 0x05 ) = { 1, 10 };
Define_TL( layer1, 0x06 ) = { 1, 13 };
Define_TL( layer1, 0x07 ) = { 1, 15 };
Define_TL( layer1, 0x08 ) = { 1, 17 };
Define_TL( layer1, 0x09 ) = { 1, 18 };
Define_TL( layer1, 0x0A ) = { 1, 21 };
Define_TL( layer1, 0x0B ) = { 1, 22 };
Define_TL( layer1, 0x0C ) = { 1, 25 };
Define_TL( layer1, 0x0D ) = { 0 };
Define_TL( layer1, 0x0E ) = { 0 };
Define_TL( layer1, 0x0F ) = { 1, 28 };
Define_TL( layer1, 0x10 ) = { 0 };
Define_TL( layer1, 0x11 ) = { 1, 32 };
Define_TL( layer1, 0x12 ) = { 1, 33 };
Define_TL( layer1, 0x13 ) = { 1, 36 };
Define_TL( layer1, 0x14 ) = { 1, 38 };
Define_TL( layer1, 0x15 ) = { 1, 39 };
Define_TL( layer1, 0x16 ) = { 1, 41 };
Define_TL( layer1, 0x17 ) = { 1, 44 };
Define_TL( layer1, 0x18 ) = { 0 };
Define_TL( layer1, 0x19 ) = { 0 };
Define_TL( layer1, 0x1A ) = { 1, 47 };
Define_TL( layer1, 0x1B ) = { 1, 49 };
Define_TL( layer1, 0x1C ) = { 1, 52 };
Define_TL( layer1, 0x1D ) = { 0 };
Define_TL( layer1, 0x1E ) = { 0 };
Define_TL( layer1, 0x1F ) = { 0 };
Define_TL( layer1, 0x20 ) = { 1, 55 };
Define_TL( layer1, 0x21 ) = { 1, 56 };
Define_TL( layer1, 0x22 ) = { 1, 58 };
Define_TL( layer1, 0x23 ) = { 0 };
Define_TL( layer1, 0x24 ) = { 0 };
Define_TL( layer1, 0x25 ) = { 0 };
Define_TL( layer1, 0x26 ) = { 0 };
Define_TL( layer1, 0x27 ) = { 0 };
Define_TL( layer1, 0x28 ) = { 0 };
Define_TL( layer1, 0x29 ) = { 0 };
Define_TL( layer1, 0x2A ) = { 0 };
Define_TL( layer1, 0x2B ) = { 0 };
Define_TL( layer1, 0x2C ) = { 0 };
Define_TL( layer1, 0x2D ) = { 0 };
Define_TL( layer1, 0x2E ) = { 0 };
Define_TL( layer1, 0x2F ) = { 0 };
Define_TL( layer1, 0x30 ) = { 0 };
Define_TL( layer1, 0x31 ) = { 0 };
Define_TL( layer1, 0x32 ) = { 1, 74 };
Define_TL( layer1, 0x33 ) = { 1, 76 };
Define_TL( layer1, 0x34 ) = { 1, 78 };
Define_TL( layer1, 0x35 ) = { 0 };
Define_TL( layer1, 0x36 ) = { 0 };
Define_TL( layer1, 0x37 ) = { 0 };
Define_TL( layer1, 0x38 ) = { 0 };
Define_TL( layer1, 0x39 ) = { 0 };
Define_TL( layer1, 0x3A ) = { 0 };
Define_TL( layer1, 0x3B ) = { 0 };
Define_TL( layer1, 0x3C ) = { 0 };
Define_TL( layer1, 0x3D ) = { 0 };
Define_TL( layer1, 0x3E ) = { 0 };
Define_TL( layer1, 0x3F ) = { 0 };
Define_TL( layer1, 0x40 ) = { 0 };
Define_TL( layer1, 0x41 ) = { 0 };
Define_TL( layer1, 0x42 ) = { 0 };
Define_TL( layer1, 0x43 ) = { 0 };
Define_TL( layer1, 0x44 ) = { 0 };
Define_TL( layer1, 0x45 ) = { 0 };
Define_TL( layer1, 0x46 ) = { 0 };
Define_TL( layer1, 0x47 ) = { 0 };
Define_TL( layer1, 0x48 ) = { 0 };
Define_TL( layer1, 0x49 ) = { 0 };
Define_TL( layer1, 0x4A ) = { 0 };
Define_TL( layer1, 0x4B ) = { 0 };
Define_TL( layer1, 0x4C ) = { 0 };
Define_TL( layer1, 0x4D ) = { 0 };
Define_TL( layer1, 0x4E ) = { 0 };
Define_TL( layer1, 0x4F ) = { 0 };
Define_TL( layer1, 0x50 ) = { 0 };
Define_TL( layer1, 0x51 ) = { 0 };
Define_TL( layer1, 0x52 ) = { 0 };
Define_TL( layer1, 0x53 ) = { 1, 105 };
Define_TL( layer1, 0x54 ) = { 0 };
Define_TL( layer1, 0x55 ) = { 0 };
Define_TL( layer1, 0x56 ) = { 0 };
Define_TL( layer1, 0x57 ) = { 0 };
Define_TL( layer1, 0x58 ) = { 0 };
Define_TL( layer1, 0x59 ) = { 0 };
Define_TL( layer1, 0x5A ) = { 0 };
Define_TL( layer1, 0x5B ) = { 0 };
Define_TL( layer1, 0x5C ) = { 1, 116 };
Define_TL( layer1, 0x5D ) = { 1, 118 };
Define_TL( layer1, 0x5E ) = { 1, 119 };


// -- ScanCode Offset Map
// Maps interconnect ids to scancode offsets
//
// Only used for keyboards with an interconnect
const uint8_t InterconnectOffsetList[] = {
	0x00,
	0x5F,
};


// -- ScanCode Indexed Maps
// Maps to a trigger list of macro pointers
//                 _
// <scan code> -> |T|
//                |r| -> <trigger macro pointer 1>
//                |i|
//                |g| -> <trigger macro pointer 2>
//                |g|
//                |e| -> <trigger macro pointer 3>
//                |r|
//                |s| -> <trigger macro pointer n>
//                 -

// - Default Map for ScanCode Lookup -
const nat_ptr_t *default_scanMap[] = { 
default_tl_0x00, default_tl_0x01, default_tl_0x02, default_tl_0x03, default_tl_0x04, default_tl_0x05, default_tl_0x06, default_tl_0x07, default_tl_0x08, default_tl_0x09, default_tl_0x0A, default_tl_0x0B, default_tl_0x0C, default_tl_0x0D, default_tl_0x0E, default_tl_0x0F, default_tl_0x10, default_tl_0x11, default_tl_0x12, default_tl_0x13, default_tl_0x14, default_tl_0x15, default_tl_0x16, default_tl_0x17, default_tl_0x18, default_tl_0x19, default_tl_0x1A, default_tl_0x1B, default_tl_0x1C, default_tl_0x1D, default_tl_0x1E, default_tl_0x1F, default_tl_0x20, default_tl_0x21, default_tl_0x22, default_tl_0x23, default_tl_0x24, default_tl_0x25, default_tl_0x26, default_tl_0x27, default_tl_0x28, default_tl_0x29, default_tl_0x2A, default_tl_0x2B, default_tl_0x2C, default_tl_0x2D, default_tl_0x2E, default_tl_0x2F, default_tl_0x30, default_tl_0x31, default_tl_0x32, default_tl_0x33, default_tl_0x34, default_tl_0x35, default_tl_0x36, default_tl_0x37, default_tl_0x38, default_tl_0x39, default_tl_0x3A, default_tl_0x3B, default_tl_0x3C, default_tl_0x3D, default_tl_0x3E, default_tl_0x3F, default_tl_0x40, default_tl_0x41, default_tl_0x42, default_tl_0x43, default_tl_0x44, default_tl_0x45, default_tl_0x46, default_tl_0x47, default_tl_0x48, default_tl_0x49, default_tl_0x4A, default_tl_0x4B, default_tl_0x4C, default_tl_0x4D, default_tl_0x4E, default_tl_0x4F, default_tl_0x50, default_tl_0x51, default_tl_0x52, default_tl_0x53, default_tl_0x54, default_tl_0x55, default_tl_0x56, default_tl_0x57, default_tl_0x58, default_tl_0x59, default_tl_0x5A, default_tl_0x5B, default_tl_0x5C, default_tl_0x5D, default_tl_0x5E, default_tl_0x5F
};


// - Partial Layer ScanCode Lookup Maps -
// Partial Layer 1
const nat_ptr_t *layer1_scanMap[] = { 
layer1_tl_0x00, layer1_tl_0x01, layer1_tl_0x02, layer1_tl_0x03, layer1_tl_0x04, layer1_tl_0x05, layer1_tl_0x06, layer1_tl_0x07, layer1_tl_0x08, layer1_tl_0x09, layer1_tl_0x0A, layer1_tl_0x0B, layer1_tl_0x0C, layer1_tl_0x0D, layer1_tl_0x0E, layer1_tl_0x0F, layer1_tl_0x10, layer1_tl_0x11, layer1_tl_0x12, layer1_tl_0x13, layer1_tl_0x14, layer1_tl_0x15, layer1_tl_0x16, layer1_tl_0x17, layer1_tl_0x18, layer1_tl_0x19, layer1_tl_0x1A, layer1_tl_0x1B, layer1_tl_0x1C, layer1_tl_0x1D, layer1_tl_0x1E, layer1_tl_0x1F, layer1_tl_0x20, layer1_tl_0x21, layer1_tl_0x22, layer1_tl_0x23, layer1_tl_0x24, layer1_tl_0x25, layer1_tl_0x26, layer1_tl_0x27, layer1_tl_0x28, layer1_tl_0x29, layer1_tl_0x2A, layer1_tl_0x2B, layer1_tl_0x2C, layer1_tl_0x2D, layer1_tl_0x2E, layer1_tl_0x2F, layer1_tl_0x30, layer1_tl_0x31, layer1_tl_0x32, layer1_tl_0x33, layer1_tl_0x34, layer1_tl_0x35, layer1_tl_0x36, layer1_tl_0x37, layer1_tl_0x38, layer1_tl_0x39, layer1_tl_0x3A, layer1_tl_0x3B, layer1_tl_0x3C, layer1_tl_0x3D, layer1_tl_0x3E, layer1_tl_0x3F, layer1_tl_0x40, layer1_tl_0x41, layer1_tl_0x42, layer1_tl_0x43, layer1_tl_0x44, layer1_tl_0x45, layer1_tl_0x46, layer1_tl_0x47, layer1_tl_0x48, layer1_tl_0x49, layer1_tl_0x4A, layer1_tl_0x4B, layer1_tl_0x4C, layer1_tl_0x4D, layer1_tl_0x4E, layer1_tl_0x4F, layer1_tl_0x50, layer1_tl_0x51, layer1_tl_0x52, layer1_tl_0x53, layer1_tl_0x54, layer1_tl_0x55, layer1_tl_0x56, layer1_tl_0x57, layer1_tl_0x58, layer1_tl_0x59, layer1_tl_0x5A, layer1_tl_0x5B, layer1_tl_0x5C, layer1_tl_0x5D, layer1_tl_0x5E
};



// ----- Layer Index -----

// -- Layer Index List
//
// Index 0: Default map
// Index n: Additional layers
const Layer LayerIndex[] = {
	Layer_IN( default_scanMap, "D: _srv_KiiConf_controller_Scan_Devices_ISSILed@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_MatrixARM@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_PortSwap@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_UARTConnect@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PartialMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PixelMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_HID-IO@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_pjrcUSB@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_K-Type@['scancode_map']_processed.kll + _srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll + @['KType-Standard-0']_processed.kll", 0x00 ),
	Layer_IN( layer1_scanMap, "1: _srv_KiiConf_controller_Scan_Devices_ISSILed@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_MatrixARM@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_PortSwap@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_UARTConnect@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PartialMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PixelMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_HID-IO@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_pjrcUSB@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_K-Type@['scancode_map']_processed.kll + _srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll + @['KType-Standard-1']_processed.kll", 0x01 ),
};


// - Layer State
uint8_t LayerState[ LayerNum ];



// ----- Key Positions -----

// -- Physical Key Positions
//
// Index 0: Key 1
// Each key has 6 dimensions
// x,y,z and rx,ry,rz (rotation)
// Units are in mm
const Position Key_Positions[] = {
	PositionEntry( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S001 <= x:0,y:0;
	PositionEntry( 38.1, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S002 <= x:38.1,y:0;
	PositionEntry( 57.15, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S003 <= x:57.15,y:0;
	PositionEntry( 76.2, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S004 <= x:76.2,y:0;
	PositionEntry( 95.25, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S005 <= x:95.25,y:0;
	PositionEntry( 123.83, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S006 <= x:123.83,y:0;
	PositionEntry( 142.88, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S007 <= x:142.88,y:0;
	PositionEntry( 161.93, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S008 <= x:161.93,y:0;
	PositionEntry( 180.98, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S009 <= x:180.98,y:0;
	PositionEntry( 209.55, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S010 <= x:209.55,y:0;
	PositionEntry( 228.6, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S011 <= x:228.6,y:0;
	PositionEntry( 247.65, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S012 <= x:247.65,y:0;
	PositionEntry( 266.7, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S013 <= x:266.7,y:0;
	PositionEntry( 295.275, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S014 <= x:295.275,y:0;
	PositionEntry( 314.33, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S015 <= x:314.33,y:0;
	PositionEntry( 333.375, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S016 <= x:333.375,y:0;
	PositionEntry( 0.0, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S017 <= x:0,y:-28.575;
	PositionEntry( 19.05, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S018 <= x:19.05,y:-28.575;
	PositionEntry( 38.1, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S019 <= x:38.1,y:-28.575;
	PositionEntry( 57.15, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S020 <= x:57.15,y:-28.575;
	PositionEntry( 76.2, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S021 <= x:76.2,y:-28.575;
	PositionEntry( 95.25, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S022 <= x:95.25,y:-28.575;
	PositionEntry( 114.3, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S023 <= x:114.3,y:-28.575;
	PositionEntry( 133.35, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S024 <= x:133.35,y:-28.575;
	PositionEntry( 152.4, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S025 <= x:152.4,y:-28.575;
	PositionEntry( 171.45, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S026 <= x:171.45,y:-28.575;
	PositionEntry( 190.5, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S027 <= x:190.5,y:-28.575;
	PositionEntry( 209.55, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S028 <= x:209.55,y:-28.575;
	PositionEntry( 228.6, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S029 <= x:228.6,y:-28.575;
	PositionEntry( 257.17, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S031 <= x:257.17,y:-28.575;
	PositionEntry( 295.275, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S033 <= x:295.275,y:-28.575;
	PositionEntry( 314.33, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S034 <= x:314.33,y:-28.575;
	PositionEntry( 333.375, -28.575, 0.0, 0.0, 0.0, 0.0 ), // S035 <= x:333.375,y:-28.575;
	PositionEntry( 4.76, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S036 <= x:4.76,y:-47.625;
	PositionEntry( 28.58, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S037 <= x:28.58,y:-47.625;
	PositionEntry( 47.63, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S038 <= x:47.63,y:-47.625;
	PositionEntry( 66.68, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S039 <= x:66.68,y:-47.625;
	PositionEntry( 85.73, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S040 <= x:85.73,y:-47.625;
	PositionEntry( 104.77, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S041 <= x:104.77,y:-47.625;
	PositionEntry( 123.83, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S042 <= x:123.83,y:-47.625;
	PositionEntry( 142.88, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S043 <= x:142.88,y:-47.625;
	PositionEntry( 161.93, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S044 <= x:161.93,y:-47.625;
	PositionEntry( 180.98, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S045 <= x:180.98,y:-47.625;
	PositionEntry( 200.02, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S046 <= x:200.02,y:-47.625;
	PositionEntry( 219.07, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S047 <= x:219.07,y:-47.625;
	PositionEntry( 238.13, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S048 <= x:238.13,y:-47.625;
	PositionEntry( 261.94, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S049 <= x:261.94,y:-47.625;
	PositionEntry( 295.275, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S051 <= x:295.275,y:-47.625;
	PositionEntry( 314.33, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S052 <= x:314.33,y:-47.625;
	PositionEntry( 333.375, -47.625, 0.0, 0.0, 0.0, 0.0 ), // S053 <= x:333.375,y:-47.625;
	PositionEntry( 7.14, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S054 <= x:7.14,y:-66.675;
	PositionEntry( 33.33, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S055 <= x:33.33,y:-66.675;
	PositionEntry( 52.39, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S056 <= x:52.39,y:-66.675;
	PositionEntry( 71.44, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S057 <= x:71.44,y:-66.675;
	PositionEntry( 90.49, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S058 <= x:90.49,y:-66.675;
	PositionEntry( 109.54, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S059 <= x:109.54,y:-66.675;
	PositionEntry( 128.6, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S060 <= x:128.60,y:-66.675;
	PositionEntry( 147.64, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S061 <= x:147.64,y:-66.675;
	PositionEntry( 166.69, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S062 <= x:166.69,y:-66.675;
	PositionEntry( 185.74, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S063 <= x:185.74,y:-66.675;
	PositionEntry( 204.79, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S064 <= x:204.79,y:-66.675;
	PositionEntry( 223.84, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S065 <= x:223.84,y:-66.675;
	PositionEntry( 254.06, -66.675, 0.0, 0.0, 0.0, 0.0 ), // S067 <= x:254.06,y:-66.675;
	PositionEntry( 11.9, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S069 <= x:11.9,y:-85.725;
	PositionEntry( 42.85, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S071 <= x:42.85,y:-85.725;
	PositionEntry( 61.91, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S072 <= x:61.91,y:-85.725;
	PositionEntry( 80.96, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S073 <= x:80.96,y:-85.725;
	PositionEntry( 100.0, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S074 <= x:100.00,y:-85.725;
	PositionEntry( 119.04, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S075 <= x:119.04,y:-85.725;
	PositionEntry( 138.1, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S076 <= x:138.10,y:-85.725;
	PositionEntry( 157.16, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S077 <= x:157.16,y:-85.725;
	PositionEntry( 176.21, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S078 <= x:176.21,y:-85.725;
	PositionEntry( 195.26, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S079 <= x:195.26,y:-85.725;
	PositionEntry( 214.31, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S080 <= x:214.31,y:-85.725;
	PositionEntry( 250.03, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S082 <= x:250.03,y:-85.725;
	PositionEntry( 314.33, -85.725, 0.0, 0.0, 0.0, 0.0 ), // S084 <= x:314.33,y:-85.725;
	PositionEntry( 0.0, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S085 <= y:-104.775;
	PositionEntry( 26.19, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S086 <= x:26.19,y:-104.775;
	PositionEntry( 50.0, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S087 <= x:50.00,y:-104.775;
	PositionEntry( 121.44, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S088 <= x:121.44,y:-104.775;
	PositionEntry( 192.88, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S089 <= x:192.88,y:-104.775;
	PositionEntry( 216.69, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S090 <= x:216.69,y:-104.775;
	PositionEntry( 240.5, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S091 <= x:240.50,y:-104.775;
	PositionEntry( 264.32, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S092 <= x:264.32,y:-104.775;
	PositionEntry( 295.275, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S093 <= x:295.275,y:-104.775;
	PositionEntry( 314.33, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S094 <= x:314.33,y:-104.775;
	PositionEntry( 333.375, -104.775, 0.0, 0.0, 0.0, 0.0 ), // S095 <= x:333.375,y:-104.775;
};

